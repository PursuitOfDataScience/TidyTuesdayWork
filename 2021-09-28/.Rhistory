labs(title = city,
y = "Incidence Rate")
ggsave(plot = p, filename = paste0(city, "png", sep="_"), width = 20, height = 10)
}
map(unique(df$msa), cat_lines)
cat_lines <- function(city){
p <- df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == city) %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage") %>%
#mutate(week = if_else(source == "google_percentage", week + 3, week)) %>%
ggplot(aes(x = week, y = percentage/100, color = source)) +
geom_line() +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18)
) +
geom_smooth(method = "loess", se = FALSE) +
facet_wrap(~category, scales = "free") +
scale_x_continuous(breaks = seq(1,30, by = 2)) +
scale_y_continuous(labels = percent) +
labs(title = city,
y = "Incidence Rate")
ggsave(plot = p, filename = paste0(city, ".png"), width = 20, height = 10)
}
map(unique(df$msa), cat_lines)
mtg <- df
mtg %>% filter(msa == "Atlanta", category == "Covid") %>%
ggplot(aes(week, incidence_rate)) +
geom_point() +
geom_line()
target_vec <- mtg %>% filter(msa == "Atlanta", category == "Covid")%>%select(google_percentage)%>%pull()
cpt.meanvar(target_vec, method = "PELT")
library(changepoint)
library(changepoint.np)
library(bcp)
cpt.meanvar(target_vec, method = "PELT")
cpt.meanvar(target_vec, method = "PELT") %>% tidy()
library(broom)
cpt.meanvar(target_vec, method = "PELT") %>% tidy()
cpt.mean(target_vec, method = "PELT") %>% tidy()
cpt.meanvar(target_vec, method = "PELT")
cpt.meanvar(target_vec, method = "PELT")
plot(cpt.meanvar(target_vec, method = "PELT"))
cpt.meanvar(target_vec, method = "PELT") %>% tidy()
library(tidyverse)
library(lubridate)
library(ggthemes)
library(tidytext)
theme_set(theme_tufte())
papers <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/papers.csv')
authors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/authors.csv')
programs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/programs.csv')
paper_authors <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/paper_authors.csv')
paper_programs <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2021/2021-09-28/paper_programs.csv')
joined_df <- papers %>%
left_join(paper_authors, by = "paper") %>%
left_join(paper_programs, by = "paper") %>%
left_join(programs, by = "program") %>%
left_join(authors, by = "author")%>%
unite(date, year:month, sep = "-", remove = FALSE) %>%
mutate(date = ym(date))
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(name, n = 15) %>%
ungroup() %>%
mutate(name = reorder_within(name, n, program_category)) %>%
ggplot(aes(n, name, fill = name)) +
geom_col(show.legend = F) +
scale_y_reordered() +
facet_wrap(~program_category, scales = "free_y") +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10)
) +
labs(x = "# of papers",
y = NULL,
title = "Top 15 Authors on Paper Publication across Various Cateogries")
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category)
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(n = 15)
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(n, n = 15)
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(n, n = 15) %>%
ungroup() %>%
mutate(name = reorder_within(name, n, program_category)) %>%
ggplot(aes(n, name, fill = name)) +
geom_col(show.legend = F) +
scale_y_reordered() +
facet_wrap(~program_category, scales = "free_y") +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18),
axis.title = element_text(size = 15),
axis.text = element_text(size = 10)
) +
labs(x = "# of papers",
y = NULL,
title = "Top 15 Authors on Paper Publication across Various Cateogries")
ggsave("2.png", width = 15, height = 6)
setwd("C:/Users/yuy/Desktop/TidyTuesdayWork/2021-09-28")
ggsave("2.png", width = 15, height = 6)
joined_df
joined_df  %>%
count(name, program_category, sort = T)
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(n, n = 15)
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(n, n = 15) %>% View()
joined_df  %>%
count(name, program_category, sort = T) %>%
group_by(program_category) %>%
slice_max(name, n = 15) %>% View()
state_milk %>%
ggplot(aes(factor(year), state, fill = milk_produced)) +
geom_tile() +
scale_fill_gradient2(high = "red",
low = "white",
mid = "blue",
midpoint = mean(state_milk$milk_produced)) +
labs(
x = NULL,
y = NULL,
fill = "pounds of milk produced",
title = "State-wise Milk Produced (pounds)"
)
milk_products_facts
milk_products_facts
milk_pivot <- milk_products_facts %>%
pivot_longer(-year, names_to = "product", values_to = "consumption")
milk_pivot %>%
ggplot(aes(year, consumption, color = product)) +
geom_line(aes(group = 1), size = 2, show.legend = FALSE) +
facet_wrap(~product, scales = "free_y") +
expand_limits(y = 0) +
theme(
strip.text = element_text(size = 15, face = "bold")
)  +
labs(y = "lbs per person",
title = "Milk Product Consumption (lbs per person)")
milk_pivot
milk_pivot %>%
separate(product, c("category", "product"), sep = "_")
?separate
milk_pivot %>%
separate(product, c("category", "product"), sep = "_",
extra = "merge")
milk_pivot %>%
separate(product, c("category", "product"), sep = "_",
extra = "merge", fill = "right")
milk_pivot %>%
separate(product, c("category", "product"), sep = "_",
extra = "merge", fill = "right")%>%
mutate(
product = coalesce(product, category),
product = str_to_title(str_replace_all(product, "_", " ")),
category = str_to_title(category)
)
milk_productes_tidied <- milk_pivot %>%
separate(product, c("category", "product"), sep = "_",
extra = "merge", fill = "right")%>%
mutate(
product = coalesce(product, category),
product = str_to_title(str_replace_all(product, "_", " ")),
category = str_to_title(category)
)
milk_productes_tidied
library(sweep)
library(timetk)
library(lubridate)
library(tidyverse)
library(lubridate)
library(sweep)
library(timetk)
milk_productes_tidied %>%
mutate(year = make_datetime(year))
milk_productes_tidied %>%
mutate(year = make_date(year))
milk_productes_tidied %>%
mutate(year = make_date(year)) %>% View()
milk_productes_tidied %>%
mutate(year = make_date(year)) %>%
nest(-c(category, product))
milk_productes_tidied %>%
mutate(year = make_date(year)) %>%
nest(-c(category, product)) %>%
mutate(ts = map(data, tk_ts, start = 1975))
milk_productes_tidied %>%
mutate(year = make_date(year)) %>%
nest(-c(category, product)) %>%
mutate(ts = map(data, tk_ts, start = 1975)) %>%
unnset(ts)
milk_productes_tidied %>%
mutate(year = make_date(year)) %>%
nest(-c(category, product)) %>%
mutate(ts = map(data, tk_ts, start = 1975)) %>%
unnest(ts)
milk_ts <- milk_productes_tidied %>%
mutate(year = make_date(year)) %>%
nest(-c(category, product)) %>%
mutate(ts = map(data, tk_ts, start = 1975))
milk_ts %>%
mutate(model = map(ts, ets))
milk_ets <- milk_ts %>%
mutate(model = map(ts, ets))
milk_ets %>%
unnest(map(model, sw_glance))
milk_ets
milk_ets %>%
unnest(map(model, sw_glance))
milk_ets %>%
mutate(glanced = map(model, sw_glance)) %>%
unnest(glanced)
milk_ets %>%
mutate(glanced = map(model, sw_glance)) %>%
unnest(glanced)
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))
?crossing
milk_ts
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10))
?invoke
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ exec(.x, list(.y))),
forecast = map(model, forecast, h = 10))
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ exec(.x, !!!list(.y))),
forecast = map(model, forecast, h = 10))
unnest(sweeped)
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)  %>%
ggplot(aes(index, consumption, color = model_name, lty = key)) +
geom_line() +
geom_ribbon(aes(ymin = lo.80, ymax = hi.80), alpha = .5) +
facet_wrap(~ product, scales = "free_y") +
expand_limits(y = 0) +
scale_x_continuous(breaks = c(1980, 2000, 2020)) +
scale_linetype_discrete(guide = FALSE) +
labs(x = "Year",
y = "Average US consumption (lbs per person)",
title = "Forecasted consumption of dairy products",
subtitle = "Based on USDA data 1975-2017. Showing 80% prediction intervals.",
color = "Model")
theme_set()
?theme_set
theme_replace()
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)  %>%
ggplot(aes(index, consumption, color = model_name, lty = key)) +
geom_line() +
geom_ribbon(aes(ymin = lo.80, ymax = hi.80), alpha = .5) +
facet_wrap(~ product, scales = "free_y") +
expand_limits(y = 0) +
scale_x_continuous(breaks = c(1980, 2000, 2020)) +
scale_linetype_discrete(guide = FALSE) +
labs(x = "Year",
y = "Average US consumption (lbs per person)",
title = "Forecasted consumption of dairy products",
subtitle = "Based on USDA data 1975-2017. Showing 80% prediction intervals.",
color = "Model")
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)  %>%
ggplot(aes(index, consumption, color = model_name, lty = key)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = lo.80, ymax = hi.80), alpha = .5) +
facet_wrap(~ product, scales = "free_y") +
expand_limits(y = 0) +
scale_x_continuous(breaks = c(1980, 2000, 2020)) +
scale_linetype_discrete(guide = FALSE) +
labs(x = "Year",
y = "Average US consumption (lbs per person)",
title = "Forecasted consumption of dairy products",
subtitle = "Based on USDA data 1975-2017. Showing 80% prediction intervals.",
color = "Model")
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)  %>%
ggplot(aes(index, consumption, color = model_name, lty = key)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = lo.95, ymax = hi.95), alpha = .5) +
facet_wrap(~ product, scales = "free_y") +
expand_limits(y = 0) +
scale_x_continuous(breaks = c(1980, 2000, 2020)) +
scale_linetype_discrete(guide = FALSE) +
labs(x = "Year",
y = "Average US consumption (lbs per person)",
title = "Forecasted consumption of dairy products",
subtitle = "Based on USDA data 1975-2017. Showing 95% prediction intervals.",
color = "Model")
cat_lines <- function(city, lag_week = 3){
p <- df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == city) %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage") %>%
mutate(week = if_else(source == "google_percentage", week + lag_week, week)) %>%
ggplot(aes(x = week, y = percentage/100, color = source)) +
geom_line() +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18)
) +
geom_smooth(method = "loess", se = FALSE) +
facet_wrap(~category, scales = "free") +
scale_x_continuous(breaks = seq(1,30, by = 2)) +
scale_y_continuous(labels = percent) +
labs(title = city,
y = "Incidence Rate")
p
#ggsave(plot = p, filename = paste0(city, ".png"), width = 20, height = 10)
}
map(unique(df$msa), cat_lines)
cat_lines <- function(city, lag_week = 3){
p <- df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == city) %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage") %>%
mutate(week = if_else(source == "google_percentage", week + lag_week, week)) %>%
ggplot(aes(x = week, y = percentage/100, color = source)) +
geom_line() +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18)
) +
geom_smooth(method = "loess", se = FALSE) +
facet_wrap(~category, scales = "free") +
scale_x_continuous(breaks = seq(1,30, by = 2)) +
scale_y_continuous(labels = percent) +
labs(title = city,
y = "Incidence Rate")
p
#ggsave(plot = p, filename = paste0(city, ".png"), width = 20, height = 10)
}
cat_lines("Atlanta", 10)
df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == city) %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage")
df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == "Atlanta") %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage")
df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == "Atlanta") %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage") %>%
mutate(week = if_else(source == "google", week + lag_week, week))
cat_lines <- function(city, lag_week = 3){
p <- df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == city) %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage") %>%
mutate(week = if_else(source == "google", week + lag_week, week)) %>%
ggplot(aes(x = week, y = percentage/100, color = source)) +
geom_line() +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18)
) +
geom_smooth(method = "loess", se = FALSE) +
facet_wrap(~category, scales = "free") +
scale_x_continuous(breaks = seq(1,30, by = 2)) +
scale_y_continuous(labels = percent) +
labs(title = city,
y = "Incidence Rate")
p
#ggsave(plot = p, filename = paste0(city, ".png"), width = 20, height = 10)
}
cat_lines("Atlanta", 10)
cat_lines <- function(city, lag_week = 3){
p <- df %>%
select(-c(twitter_score, google_score)) %>%
filter(msa == city) %>%
rename(twitter = incidence_rate,
google = google_percentage) %>%
pivot_longer(cols = c(twitter, google), names_to = "source", values_to = "percentage") %>%
mutate(week = if_else(source == "twitter", week + lag_week, week)) %>%
ggplot(aes(x = week, y = percentage/100, color = source)) +
geom_line() +
theme(
strip.text = element_text(size = 15, face = "bold"),
plot.title = element_text(size = 18)
) +
geom_smooth(method = "loess", se = FALSE) +
facet_wrap(~category, scales = "free") +
scale_x_continuous(breaks = seq(1,30, by = 2)) +
scale_y_continuous(labels = percent) +
labs(title = city,
y = "Incidence Rate")
p
#ggsave(plot = p, filename = paste0(city, ".png"), width = 20, height = 10)
}
cat_lines("Atlanta", 10)
cat_lines("Atlanta")
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)  %>%
ggplot(aes(index, consumption, color = model_name, lty = key)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = lo.95, ymax = hi.95), alpha = .5) +
facet_wrap(~ product, scales = "free_y") +
expand_limits(y = 0) +
scale_x_continuous(breaks = c(1980, 2000, 2020)) +
scale_linetype_discrete(guide = FALSE) +
labs(x = "Year",
y = "Average US consumption (lbs per person)",
title = "Forecasted consumption of dairy products",
subtitle = "Based on USDA data 1975-2017. Showing 95% prediction intervals.",
color = "Model")
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))%>%
mutate(model = map2(model_name, ts, ~ invoke(.x, list(.y))),
forecast = map(model, forecast, h = 10)) %>%
mutate(sweeped = map(forecast, sw_sweep)) %>%
unnest(sweeped)  %>%
ggplot(aes(index, consumption, color = model_name, lty = key)) +
geom_line(size = 1) +
geom_ribbon(aes(ymin = lo.95, ymax = hi.95, fill = model_name), alpha = .5) +
facet_wrap(~ product, scales = "free_y") +
expand_limits(y = 0) +
scale_x_continuous(breaks = c(1980, 2000, 2020)) +
scale_linetype_discrete(guide = FALSE) +
labs(x = "Year",
y = "Average US consumption (lbs per person)",
title = "Forecasted consumption of dairy products",
subtitle = "Based on USDA data 1975-2017. Showing 95% prediction intervals.",
color = "Model")
milk_ts %>%
crossing(model_name = c("auto.arima", "ets"))
?invoke
invoke(mean,list(1:10))
invoke(mean, 1:10)
state_milk %>%
ggplot(aes(year, state, size = milk_produced)) +
geom_point()
state_milk %>%
ggplot(aes(factor(year), state, fill = milk_produced)) +
geom_tile() +
scale_fill_gradient2(high = "red",
low = "white",
mid = "blue",
midpoint = mean(state_milk$milk_produced)) +
labs(
x = NULL,
y = NULL,
fill = "pounds of milk produced",
title = "State-wise Milk Produced (pounds)"
)
