scale_x_discrete(expand = c(0,0)) +
scale_y_discrete(expand = c(0,0)) +
scale_fill_gradient(low = "red", high = "green")
breed_traits %>%
select(breed, contains("good"), barking_level) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs, size = barking_level)) +
geom_jitter() +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs, size = barking_level)) +
geom_jitter() +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
pivot_longer(cols = is.numeric, names_to = "metric") %>%
group_by(coat_type, coat_length, metric) %>%
summarize(mean_score = mean(value)) %>%
ungroup() %>%
filter(mean_score > 0) %>%
mutate(metric = str_replace_all(metric, "_", " ")) %>%
ggplot(aes(coat_type, metric, fill = mean_score)) +
geom_tile() +
facet_wrap(~coat_length, scale = "free_x") +
theme(strip.text = element_text(size = 15),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "coat type",
y = "",
fill = "mean score",
title = "Average Score between Coat Type and Coat Length Across Metrics") +
scale_x_discrete(expand = c(0,0)) +
scale_y_discrete(expand = c(0,0)) +
scale_fill_gradient(low = "red", high = "green")
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(size = affectionate_with_family)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs, color = affectionate_with_family)) +
geom_jitter(aes(size = affectionate_with_family)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs, color = barking_level)) +
geom_jitter(aes(size = affectionate_with_family)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs, size = barking_level)) +
geom_jitter(aes(color = affectionate_with_family)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1)
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank())
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank()) +
scale_fill_gradient(high = "green", low = "red")
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank()) +
scale_color_gradient(high = "green", low = "red")
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank()) +
labs(x = "good with kids",
y = "good with dog peers",
size = "barking level",
color = "good with family",
title = "The Relations between Dogs and Good with Other Beings")
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank()) +
labs(x = "good with kids",
y = "good with dog peers",
size = "barking level",
color = "good with family",
title = "The Relations between Dogs and Good with Other Beings") +
scale_color_gradient(high = "green", low = "red")
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "good with kids",
y = "good with dog peers",
size = "barking level",
color = "good with family",
title = "The Relations between Dogs and Good with Other Beings") +
scale_color_gradient(high = "green", low = "red")
trait_description
trait_description %>%
unnest_tokens(word, Description)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
count(Trait, word, sort = T)
library(ggraph)
library(widyr)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
count(Trait, word, sort = T)
?pairwise_cor
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
count(Trait, word, sort = T) %>%
pairwise_cor(word, Trait, value = n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(word != "dog") %>%
count(Trait, word, sort = T) %>%
pairwise_cor(word, Trait, value = n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(word != "dogs") %>%
count(Trait, word, sort = T) %>%
pairwise_cor(word, Trait, value = n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day")) %>%
count(Trait, word, sort = T) %>%
pairwise_cor(word, Trait, value = n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
pairwise_cor(word, Trait, value = n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
group_by(Trait) %>%
pairwise_cor(word, Trait, value = n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
group_by(Trait) %>%
pairwise_cor(word, Trait, value = n) %>%
slice_max(abs(correlation), n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 10) %>%
group_by(Trait) %>%
pairwise_cor(word, Trait, value = n) %>%
slice_max(abs(correlation), n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 3) %>%
group_by(Trait) %>%
pairwise_cor(word, Trait, value = n) %>%
slice_max(abs(correlation), n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 3)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
group_by(Trait) %>%
pairwise_cor(word, Trait, value = n) %>%
slice_max(abs(correlation), n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
#filter(n > 1) %>%
group_by(Trait) %>%
pairwise_cor(word, Trait, value = n) %>%
slice_max(abs(correlation), n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T)
?bind_tf_idf
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
bind_tf_idf(word, Trait, n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
bind_tf_idf(word, Trait, n) %>%
group_by(Trait) %>%
slice_max(tf_idf, n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
group_by(Trait) %>%
slice_max(tf_idf, n = 20)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
group_by(Trait) %>%
slice_max(tf_idf, n = 1)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col()
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge")
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom")
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
mutate(word = fct_reorder(word, tf_idf, sum)) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom")
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
mutate(word = fct_reorder(word, tf_idf, sum)) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom") +
labs(x = "TF-IDF",
title = "The Largest TF-IDF Values Across Metrics")
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
mutate(word = fct_reorder(word, tf_idf, sum)) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "TF-IDF",
title = "The Largest TF-IDF Values Across Metrics")
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
mutate(word = fct_reorder(word, tf_idf, sum)) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "TF-IDF",
fill = "trait",
title = "The Largest TF-IDF Values Across Traits")
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
mutate(word = fct_reorder(word, tf_idf, sum)) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "TF-IDF",
fill = "trait",
title = "The Largest TF-IDF Description Words Across Traits")
setwd("C:/Users/yuy/Desktop/TidyTuesdayWork/2022-02-01")
breed_pivot %>%
group_by(year) %>%
slice_min(rank, n = 20) %>%
ungroup() %>%
mutate(year = as.numeric(year),
Breed = reorder_within(Breed, -rank, year, sum)) %>%
ggplot(aes(rank, Breed, fill = rank)) +
geom_col(show.legend = F) +
scale_y_reordered() +
scale_x_continuous(breaks = seq(1,20,2)) +
facet_wrap(~year, ncol = 4, scales = "free_y") +
scale_fill_gradient(low = "gold", high = "brown") +
theme(strip.text = element_text(size = 15),
plot.title = element_text(size = 17)) +
labs(y = "",
title = "Yearly Top 20 Ranking Breed")
breed_pivot %>%
group_by(year) %>%
slice_min(rank, n = 20) %>%
ungroup() %>%
mutate(year = as.numeric(year),
Breed = reorder_within(Breed, -rank, year, sum)) %>%
ggplot(aes(rank, Breed, fill = rank)) +
geom_col(show.legend = F) +
scale_y_reordered() +
scale_x_continuous(breaks = seq(1,20,2)) +
facet_wrap(~year, ncol = 4, scales = "free_y") +
scale_fill_gradient(low = "gold", high = "brown") +
theme(strip.text = element_text(size = 15),
plot.title = element_text(size = 17)) +
labs(y = "",
title = "Yearly Top 20 Ranking Breed")
ggsave("plot1.png", width = 10, height = 13)
ggsave("plot1.png", width = 15, height = 13)
ggsave("plot1.png", width = 18, height = 13)
ggsave("plot1.png", width = 18, height = 11)
breed_traits %>%
pivot_longer(cols = is.numeric, names_to = "metric") %>%
group_by(coat_type, coat_length, metric) %>%
summarize(mean_score = mean(value)) %>%
ungroup() %>%
filter(mean_score > 0) %>%
mutate(metric = str_replace_all(metric, "_", " ")) %>%
ggplot(aes(coat_type, metric, fill = mean_score)) +
geom_tile() +
facet_wrap(~coat_length, scale = "free_x") +
theme(strip.text = element_text(size = 15),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "coat type",
y = "",
fill = "mean score",
title = "Average Score between Coat Type and Coat Length Across Metrics") +
scale_x_discrete(expand = c(0,0)) +
scale_y_discrete(expand = c(0,0)) +
scale_fill_gradient(low = "red", high = "green")
ggsave("plot2.png", width = 18, height = 11)
breed_traits %>%
select(breed, contains("good"), barking_level, affectionate_with_family) %>%
filter(barking_level > 0, good_with_young_children > 0) %>%
ggplot(aes(good_with_young_children, good_with_other_dogs)) +
geom_jitter(aes(color = affectionate_with_family, size = barking_level)) +
geom_text(aes(label = breed), check_overlap = T, hjust = 1, vjust = 1) +
theme(panel.grid = element_blank(),
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "good with kids",
y = "good with dog peers",
size = "barking level",
color = "good with family",
title = "The Relations between Dogs and Good with Other Beings") +
scale_color_gradient(high = "green", low = "red")
ggsave("plot3.png", width = 18, height = 11)
ggsave("plot3.png", width = 15, height = 11)
trait_description %>%
unnest_tokens(word, Description) %>%
anti_join(stop_words) %>%
filter(!word %in% c("dogs", "day", "breeds")) %>%
count(Trait, word, sort = T) %>%
filter(n > 1) %>%
bind_tf_idf(word, Trait, n) %>%
mutate(word = fct_reorder(word, tf_idf, sum)) %>%
ggplot(aes(tf_idf, word, fill = Trait)) +
geom_col(position = "dodge") +
theme(legend.position = "bottom",
axis.title = element_text(size = 13),
axis.text = element_text(size = 12),
plot.title = element_text(size = 18)) +
labs(x = "TF-IDF",
fill = "trait",
title = "The Largest TF-IDF Description Words Across Traits")
ggsave("plot4.png", width = 15, height = 11)
R.version()
R.version
